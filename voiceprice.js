let basePrice = 0;
let urgent = false;

let isProcessing = false;

async function fetchWithRetry(url, options, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      return response;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, error.message);
      
      if (i === retries - 1) throw error;
      
      const delay = 3000 * (i + 1);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

const manualInput = document.getElementById('manualInput');
const serviceSelect = document.getElementById('serviceSelect');
const fileLabel = document.getElementById('fileLabel');
const urgentToggle = document.getElementById('urgentToggle');
const resultBlock = document.getElementById('result');

window.toggleUrgent = function() {
  urgent = !urgent;
  urgentToggle.classList.toggle('active', urgent);
  
  if (manualInput.value && parseInt(manualInput.value) > 0) {
    calculate();
  }
}

manualInput.addEventListener('keypress', function(event) {
  if (event.key === 'Enter') {
    event.preventDefault();
    calculate();
  }
});

const serviceTips = {
  "voice_text": "‚ö° –ó–∞–≥—Ä—É–∑–∏—Ç–µ txt –∏–ª–∏ docx, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏. –í—Å–µ —á–∏—Å–ª–∞, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Ç–∞–∫, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Ö –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 32 –º - —Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–∞ –º–µ—Ç—Ä–∞",
  "voice_video": "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–µ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–µ–ø–µ–Ω—å. 6 –º–∏–Ω—É—Ç 3 —Å–µ–∫—É–Ω–¥—ã => 7 –º–∏–Ω—É—Ç",
  "translate_text": "üìö –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (txt, docx) –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
  "translate_voice": "üåç –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–µ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–µ–ø–µ–Ω—å. 6 –º–∏–Ω—É—Ç 3 —Å–µ–∫—É–Ω–¥—ã => 7 –º–∏–Ω—É—Ç",
  "voice_camera": "üìπ –ó–∞–≥—Ä—É–∑–∏—Ç–µ txt –∏–ª–∏ docx, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏. –í—Å–µ —á–∏—Å–ª–∞, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Ç–∞–∫, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Ö –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 120 –∫–º ‚Üí —Å—Ç–æ –¥–≤–∞–¥—Ü–∞—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤."
};

function updateUI() {
  const allowFile = ['voice_text', 'translate_text', 'voice_camera'].includes(serviceSelect.value);
  const fileWrapper = document.getElementById("fileWrapper");
  fileWrapper.classList.toggle('hidden', !allowFile);

  const ph = {
    'voice_text': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤',
    'voice_video': '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–º–∏–Ω—É—Ç—ã)',
    'translate_text': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
    'translate_voice': '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–º–∏–Ω—É—Ç—ã)',
    'voice_camera': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤'
  };
  manualInput.placeholder = ph[serviceSelect.value] || '–í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é';
  
  // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const tooltipText = document.getElementById('tooltipText');
  if (tooltipText) {
    tooltipText.classList.add('fade-out');
    
    setTimeout(() => {
      tooltipText.textContent = serviceTips[serviceSelect.value] || "";
      tooltipText.classList.remove('fade-out');
    }, 300);
  }
  
  manualInput.value = '';
}

serviceSelect.addEventListener('change', updateUI);

document.addEventListener("DOMContentLoaded", updateUI);

// Drag and Drop
const dropZone = document.querySelector('.calculator-wrapper');
const dropOverlay = document.getElementById('dropOverlay');
let dragCounter = 0;

dropZone.addEventListener('dragenter', (e) => {
  e.preventDefault();
  e.stopPropagation();
  dragCounter++;
  dropOverlay.classList.add('active');
});

dropZone.addEventListener('dragleave', (e) => {
  e.preventDefault();
  e.stopPropagation();
  dragCounter--;
  if (dragCounter === 0) {
    dropOverlay.classList.remove('active');
  }
});

dropZone.addEventListener('dragover', (e) => {
  e.preventDefault();
  e.stopPropagation();
});

dropZone.addEventListener('drop', async (e) => {
  e.preventDefault();
  e.stopPropagation();
  dragCounter = 0;
  dropOverlay.classList.remove('active');

  const file = e.dataTransfer.files[0];
  if (!file || !['text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(file.type)) {
    alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .docx');
    return;
  }

  if (!['voice_text', 'translate_text', 'voice_camera'].includes(serviceSelect.value)) {
    serviceSelect.value = 'voice_text';
    updateUI();
  }

  document.getElementById('fileInput').files = e.dataTransfer.files;
  handleFile({ target: { files: e.dataTransfer.files } });
});

document.getElementById('fileInput').addEventListener('change', handleFile);

function handleFile(e) {
  if (isProcessing) {
    console.log('‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª...');
    return;
  }
  
  const file = e.target.files[0];
  if (!file) return;
  
  isProcessing = true;

  const icon = fileLabel.querySelector('.icon');
  const loader = fileLabel.querySelector('.loader');
  icon.classList.add('hidden');
  loader.classList.remove('hidden');

  const done = async (text) => {
    try {
      console.log('üìÑ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞/—Å–∏–º–≤–æ–ª—ã...');
      const count = await countBackend(text);
      if (!isNaN(count) && count >= 1) {
        manualInput.value = count;
        calculate();
      } else {
        manualInput.value = 0;
        alert("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤!");
      }
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª.");
    } finally {
      icon.classList.remove('hidden');
      loader.classList.add('hidden');
    }
  };

  const fail = (msg) => {
    icon.classList.remove('hidden');
    loader.classList.add('hidden');
    alert(msg);
    isProcessing = false;
  };

  if (file.name.endsWith('.txt')) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const text = event.target.result;
      const looksBroken = text.includes("ÔøΩ") || text.length < 100;

      if (looksBroken) {
        const fallbackReader = new FileReader();
        fallbackReader.onload = function (e) {
          const recoveredText = e.target.result;
          setTimeout(() => {
            done(recoveredText);
            isProcessing = false;
          }, 500 + Math.random() * 800);
        };
        fallbackReader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .txt —Ñ–∞–π–ª (–∫–æ–¥–∏—Ä–æ–≤–∫–∞).");
        fallbackReader.readAsText(file, 'windows-1251');
      } else {
        setTimeout(() => {
          done(text);
          isProcessing = false; // ‚Üê –î–û–ë–ê–í–ò–¢–¨
        }, 500 + Math.random() * 800);
      }
    };
    reader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .txt —Ñ–∞–π–ª.");
    reader.readAsText(file);
  } else if (file.name.endsWith('.docx')) {
    const reader = new FileReader();
    reader.onload = function (event) {
      mammoth.extractRawText({ arrayBuffer: event.target.result })
        .then(result => {
          const text = result.value || '';
          setTimeout(() => {
            done(text);
            isProcessing = false; // ‚Üê –î–û–ë–ê–í–ò–¢–¨
          }, 500 + Math.random() * 800);
        })
        .catch(err => {
          fail("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ .docx —Ñ–∞–π–ª–∞.");
        });
    };
    reader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .docx —Ñ–∞–π–ª.");
    reader.readAsArrayBuffer(file);
  } else {
    fail("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –∏ .docx");
  }
}

async function countBackend(text) {
  const service = serviceSelect.value;
  const url = service === 'translate_text'
    ? "https://telegram-voicebot.onrender.com/count_chars"
    : "https://telegram-voicebot.onrender.com/count_words";

    const response = await fetchWithRetry(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ text, service })
  });

  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  const data = await response.json();
  return service === 'translate_text' ? data.chars : data.words;
}

async function calculate() {
  if (isProcessing) {
    console.log('‚è≥ –£–∂–µ –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...');
    return;
  }
  isProcessing = true;
  
  const service = serviceSelect.value;
  let value = parseInt(manualInput.value) || 0;

  const resultContent = resultBlock.querySelector('.result-content');
  
  if (!value || value <= 0) {
    if (resultContent) {
      resultContent.innerHTML = '<p style="color: #ff4444; text-align: center; margin: 0;">–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</p>';
    }
    return;
  }

  if (resultContent) {
    resultContent.innerHTML = `
      <div class="spinner"></div>
      <div style="margin-top:12px;color:#888;text-align:center;">–°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å...</div>
    `;
  }

  const payload = {
    service: service,
    text: value.toString(),
    is_urgent: urgent
  };

  try {
    const response = await fetchWithRetry("https://telegram-voicebot.onrender.com/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    const data = await response.json();

    function secondsToTime(sec) {
      const m = Math.floor(sec / 60);
      const s = Math.round(sec % 60);
      return `${m}:${s < 10 ? '0' : ''}${s}`;
    }

    let serviceTitle = {
      'voice_text': "–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞",
      'voice_video': "–û–∑–≤—É—á–∫–∞ –≤–∏–¥–µ–æ",
      'translate_text': "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞",
      'translate_voice': "–ü–µ—Ä–µ–≤–æ–¥ + –æ–∑–≤—É—á–∫–∞ –≤–∏–¥–µ–æ",
      'voice_camera': "–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–º–µ—Ä—É"
    }[service] || "";

    let resultText = ``;

    resultText += `
      <div class="result-row">
        <div class="icon">üì¶</div>
        <div class="label">–£—Å–ª—É–≥–∞:</div>
        <div class="value">${serviceTitle}${urgent ? " (–°–†–û–ß–ù–û)" : ""}</div>
      </div>
    `;

    if (service === 'voice_text' || service === 'voice_camera') {
      const words = data.word_count;
      const minutes = Math.ceil(words / 120);
      const optimal_time = secondsToTime(Math.round(words * 60 / 133));
      resultText += `
        <div class="result-row">
          <div class="icon">üìÑ</div>
          <div class="label">–°–ª–æ–≤:</div>
          <div class="value">${words}</div>
        </div>
        <div class="result-row">
          <div class="icon">üïë</div>
          <div class="label">–î–æ:</div>
          <div class="value">${minutes} –º–∏–Ω—É—Ç</div>
        </div>
        <div class="result-row">
          <div class="icon">üéØ</div>
          <div class="label">–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂:</div>
          <div class="value">${optimal_time}</div>
        </div>
      `;
    }

    if (service === 'voice_video' || service === 'translate_voice') {
      resultText += `
        <div class="result-row">
          <div class="icon">üïë</div>
          <div class="label">–î–æ:</div>
          <div class="value">${value} –º–∏–Ω—É—Ç</div>
        </div>
      `;
    }

    if (service === 'translate_text') {
      resultText += `
        <div class="result-row">
          <div class="icon">üìù</div>
          <div class="label">–ó–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:</div>
          <div class="value">${value}</div>
        </div>
      `;
    }

    const deadline = urgent ? data.deadline_urgent : data.deadline;
    const match = deadline.match(/^(.+?) \(–¥–æ (.+?) –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\)$/);

    let daysOnly = '';
    if (match?.[1]) {
      const num = parseInt(match[1]);
      if (!isNaN(num)) {
        daysOnly = num === 1 ? '1 –¥–µ–Ω—å' : `–¥–æ ${num} –¥–Ω–µ–π`;
      } else {
        daysOnly = `–¥–æ ${match[1]}`;
      }
    }

    const dateOnly = match?.[2] || "";

    resultText += `
      <div class="result-row">
        <div class="icon">‚è∞</div>
        <div class="label">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</div>
        <div class="value">${daysOnly}</div>
      </div>
      <div class="result-row">
        <div class="icon">üìÖ</div>
        <div class="label">–î–µ–¥–ª–∞–π–Ω:</div>
        <div class="value">${dateOnly}</div>
      </div>
    `;

    resultText += `
      <div class="result-row">
        <div class="icon">üí∞</div>
        <div class="label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</div>
        <div class="value">${
          urgent
            ? `${data.price_rub.toLocaleString('ru-RU')} ‚ÇΩ ‚û°Ô∏è ${data.price_rub_urgent.toLocaleString('ru-RU')} ‚ÇΩ`
            : `${data.price_rub.toLocaleString('ru-RU')} ‚ÇΩ`
        }</div>
      </div>
    `;

/*    resultText += `
      <div class="result-row">
        <div class="icon">üí≤</div>
        <div class="label">–í USDT:</div>
        <div class="value">${
          urgent
            ? `${data.price_usdt} USDT ‚û°Ô∏è ${data.price_usdt_urgent} USDT`
            : `${data.price_usdt} USDT`
        }</div>
      </div>
    `;*/

    setTimeout(() => {
      const resultContent = resultBlock.querySelector('.result-content');
      if (resultContent) {
        resultContent.innerHTML = resultText;
      }
    }, 600 + Math.random() * 400);

  } catch (error) {
    const resultContent = resultBlock.querySelector('.result-content');
    if (resultContent) {
      resultContent.innerHTML = '<p style="color: #ff4444; text-align: center; margin: 0;">–û—à–∏–±–∫–∞: ' + error.message + '</p>';
    }
  } finally {
    isProcessing = false; // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ë–õ–û–ö
  }
}
