let basePrice = 0;
let urgent = false;
let isProcessing = false;

// –ü–†–ê–í–ò–õ–¨–ù–´–ï ID –∏–∑ –≤–∞—à–µ–≥–æ HTML
const manualInput = document.getElementById('calc-manualInput');
const serviceSelect = document.getElementById('calc-serviceSelect');
const fileLabel = document.getElementById('calc-fileLabel');
const urgentToggle = document.getElementById('calc-urgentToggle');
const resultBlock = document.getElementById('calc-result');

// ============================================
// –§–£–ù–ö–¶–ò–Ø RETRY –î–õ–Ø –í–°–ï–• –ó–ê–ü–†–û–°–û–í
// ============================================
async function fetchWithRetry(url, options, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries} ‚Üí ${url}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      return response;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, error.message);
      
      if (i === retries - 1) throw error;
      
      const delay = 3000 * (i + 1);
      console.log(`‚è≥ –ñ–¥—ë–º ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

// ============================================
// –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –°–†–û–ß–ù–û–°–¢–ò
// ============================================
window.calcToggleUrgent = function() {
  urgent = !urgent;
  if (urgentToggle) {
    urgentToggle.classList.toggle('active', urgent);
  }
  
  if (manualInput && manualInput.value && parseInt(manualInput.value) > 0) {
    calcCalculate();
  }
}

if (manualInput) {
  manualInput.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
      event.preventDefault();
      calcCalculate();
    }
  });
}

// ============================================
// –ü–û–î–°–ö–ê–ó–ö–ò –î–õ–Ø –£–°–õ–£–ì
// ============================================
const serviceTips = {
  "voice_text": "‚ö° –ó–∞–≥—Ä—É–∑–∏—Ç–µ txt –∏–ª–∏ docx, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏. –í—Å–µ —á–∏—Å–ª–∞, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Ç–∞–∫, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Ö –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 32 –º - —Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–∞ –º–µ—Ç—Ä–∞",
  "voice_video": "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. 6 –º–∏–Ω—É—Ç 3 —Å–µ–∫—É–Ω–¥—ã => 7 –º–∏–Ω—É—Ç",
  "translate_text": "üìö –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (txt, docx) –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
  "translate_voice": "üåç –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. 6 –º–∏–Ω—É—Ç 3 —Å–µ–∫—É–Ω–¥—ã => 7 –º–∏–Ω—É—Ç",
  "voice_camera": "üìπ –ó–∞–≥—Ä—É–∑–∏—Ç–µ txt –∏–ª–∏ docx, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏. –í—Å–µ —á–∏—Å–ª–∞, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Ç–∞–∫, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏—Ö –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 120 –∫–º ‚Üí —Å—Ç–æ –¥–≤–∞–¥—Ü–∞—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤."
};

function updateUI() {
  if (!serviceSelect) return;
  
  const allowFile = ['voice_text', 'translate_text', 'voice_camera'].includes(serviceSelect.value);
  const fileWrapper = document.getElementById("calc-fileWrapper");
  if (fileWrapper) {
    fileWrapper.classList.toggle('calc-hidden', !allowFile);
  }

  const ph = {
    'voice_text': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤',
    'voice_video': '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–º–∏–Ω—É—Ç—ã)',
    'translate_text': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
    'translate_voice': '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–º–∏–Ω—É—Ç—ã)',
    'voice_camera': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤'
  };
  
  if (manualInput) {
    manualInput.placeholder = ph[serviceSelect.value] || '–í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é';
    manualInput.value = '';
  }
  
  const tooltipText = document.getElementById('calc-tooltipText');
  if (tooltipText) {
    tooltipText.classList.add('fade-out');
    setTimeout(() => {
      tooltipText.textContent = serviceTips[serviceSelect.value] || "";
      tooltipText.classList.remove('fade-out');
    }, 300);
  }
}

if (serviceSelect) {
  serviceSelect.addEventListener('change', updateUI);
}

document.addEventListener("DOMContentLoaded", () => {
  updateUI();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
  const dateSpan = document.getElementById('calc-currentDate');
  if (dateSpan) {
    const today = new Date();
    dateSpan.textContent = today.toLocaleDateString('ru-RU', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric' 
    });
  }
});

// ============================================
// DRAG AND DROP
// ============================================
const dropZone = document.querySelector('.calc-calculator-wrapper');
const dropOverlay = document.getElementById('calc-dropOverlay');
let dragCounter = 0;

if (dropZone && dropOverlay) {
  dropZone.addEventListener('dragenter', (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter++;
    dropOverlay.classList.add('active');
  });

  dropZone.addEventListener('dragleave', (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter--;
    if (dragCounter === 0) {
      dropOverlay.classList.remove('active');
    }
  });

  dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    e.stopPropagation();
  });

  dropZone.addEventListener('drop', async (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter = 0;
    dropOverlay.classList.remove('active');

    const file = e.dataTransfer.files[0];
    if (!file || !['text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(file.type)) {
      alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .docx');
      return;
    }

    if (serviceSelect && !['voice_text', 'translate_text', 'voice_camera'].includes(serviceSelect.value)) {
      serviceSelect.value = 'voice_text';
      updateUI();
    }

    const fileInput = document.getElementById('calc-fileInput');
    if (fileInput) {
      fileInput.files = e.dataTransfer.files;
      handleFile({ target: { files: e.dataTransfer.files } });
    }
  });
}

const fileInput = document.getElementById('calc-fileInput');
if (fileInput) {
  fileInput.addEventListener('change', handleFile);
}

// ============================================
// –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê
// ============================================
async function handleFile(e) {
  if (isProcessing) {
    console.log('‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª...');
    return;
  }
  
  const file = e.target.files[0];
  if (!file) return;

  isProcessing = true;

  const icon = fileLabel?.querySelector('.calc-icon');
  const loader = fileLabel?.querySelector('.calc-loader');
  const resultContent = resultBlock?.querySelector('.calc-result-content');

  if (icon) icon.classList.add('calc-hidden');
  if (loader) loader.classList.remove('calc-hidden');
  
  if (resultContent) {
    resultContent.innerHTML = `
      <div style="text-align: center; padding: 20px;">
        <div class="spinner" style="margin: 0 auto 10px;"></div>
        <div>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...</div>
        <div style="font-size: 12px; opacity: 0.7; margin-top: 8px;">
          –ï—Å–ª–∏ –¥–æ–ª–≥–æ - —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–¥–æ 60 —Å–µ–∫)
        </div>
      </div>
    `;
  }

  const done = async (text) => {
    try {
      console.log('üìÑ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞/—Å–∏–º–≤–æ–ª—ã...');
      const count = await countBackend(text);
      
      if (!isNaN(count) && count >= 1) {
        if (manualInput) manualInput.value = count;
        await calcCalculate();
      } else {
        if (manualInput) manualInput.value = 0;
        if (resultContent) {
          resultContent.innerHTML = '<p style="color: #ff4444; text-align: center;">‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞!</p>';
        }
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err);
      if (resultContent) {
        resultContent.innerHTML = `
          <p style="color: #ff4444; text-align: center;">
            ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞<br>
            <small>${err.message}</small>
          </p>
        `;
      }
    } finally {
      if (icon) icon.classList.remove('calc-hidden');
      if (loader) loader.classList.add('calc-hidden');
      isProcessing = false;
    }
  };

  const fail = (msg) => {
    if (icon) icon.classList.remove('calc-hidden');
    if (loader) loader.classList.add('calc-hidden');
    if (resultContent) {
      resultContent.innerHTML = `<p style="color: #ff4444; text-align: center;">‚ùå ${msg}</p>`;
    }
    isProcessing = false;
  };

  if (file.name.endsWith('.txt')) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const text = event.target.result;
      const looksBroken = text.includes("ÔøΩ") || text.length < 100;

      if (looksBroken) {
        const fallbackReader = new FileReader();
        fallbackReader.onload = (e) => done(e.target.result);
        fallbackReader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)");
        fallbackReader.readAsText(file, 'windows-1251');
      } else {
        done(text);
      }
    };
    reader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .txt —Ñ–∞–π–ª");
    reader.readAsText(file);
  } else if (file.name.endsWith('.docx')) {
    const reader = new FileReader();
    reader.onload = function (event) {
      mammoth.extractRawText({ arrayBuffer: event.target.result })
        .then(result => done(result.value || ''))
        .catch(() => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ .docx"));
    };
    reader.onerror = () => fail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .docx —Ñ–∞–π–ª");
    reader.readAsArrayBuffer(file);
  } else {
    fail("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .docx");
  }
}

// ============================================
// –ü–û–î–°–ß–Å–¢ –°–õ–û–í/–°–ò–ú–í–û–õ–û–í –ù–ê –°–ï–†–í–ï–†–ï
// ============================================
async function countBackend(text) {
  if (!serviceSelect) throw new Error('Service select not found');
  
  const service = serviceSelect.value;
  const url = service === 'translate_text'
    ? "https://telegram-voicebot.onrender.com/count_chars"
    : "https://telegram-voicebot.onrender.com/count_words";

  const response = await fetchWithRetry(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ text, service })
  }, 3);

  const data = await response.json();
  return service === 'translate_text' ? data.chars : data.words;
}

// ============================================
// –†–ê–°–ß–Å–¢ –°–¢–û–ò–ú–û–°–¢–ò (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
// ============================================
window.calcCalculate = async function() {
  if (isProcessing) {
    console.log('‚è≥ –£–∂–µ –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...');
    return;
  }

  if (!serviceSelect || !manualInput || !resultBlock) {
    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const service = serviceSelect.value;
  let value = parseInt(manualInput.value) || 0;
  const resultContent = resultBlock.querySelector('.calc-result-content');
  
  if (!value || value <= 0) {
    if (resultContent) {
      resultContent.innerHTML = '<p style="color: #ff4444; text-align: center; margin: 0;">‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</p>';
    }
    return;
  }

  isProcessing = true;

  if (resultContent) {
    resultContent.innerHTML = `
      <div style="text-align: center; padding: 20px;">
        <div class="spinner" style="margin: 0 auto 10px;"></div>
        <div>–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å...</div>
        <div style="font-size: 12px; opacity: 0.7; margin-top: 8px;">
          –ï—Å–ª–∏ –¥–æ–ª–≥–æ - —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–¥–æ 60 —Å–µ–∫)
        </div>
      </div>
    `;
  }

  const payload = {
    service: service,
    text: value.toString(),
    is_urgent: urgent
  };

  try {
    console.log('üí∞ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏...', payload);
    
    const response = await fetchWithRetry("https://telegram-voicebot.onrender.com/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    }, 3);

    const data = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', data);

    // –û–°–¢–ê–í–õ–Ø–ï–ú –í–ê–® –ö–û–î –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
    function secondsToTime(sec) {
      const m = Math.floor(sec / 60);
      const s = Math.round(sec % 60);
      return `${m}:${s < 10 ? '0' : ''}${s}`;
    }

    let serviceTitle = {
      'voice_text': "–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞",
      'voice_video': "–û–∑–≤—É—á–∫–∞ –≤–∏–¥–µ–æ",
      'translate_text': "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞",
      'translate_voice': "–ü–µ—Ä–µ–≤–æ–¥ + –æ–∑–≤—É—á–∫–∞ –≤–∏–¥–µ–æ",
      'voice_camera': "–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–º–µ—Ä—É"
    }[service] || "";

    let resultText = `
      <div class="result-row">
        <div class="icon">üì¶</div>
        <div class="label">–£—Å–ª—É–≥–∞:</div>
        <div class="value">${serviceTitle}${urgent ? " (–°–†–û–ß–ù–û)" : ""}</div>
      </div>
    `;

    if (service === 'voice_text' || service === 'voice_camera') {
      const words = data.word_count;
      const minutes = Math.ceil(words / 120);
      const optimal_time = secondsToTime(Math.round(words * 60 / 133));
      resultText += `
        <div class="result-row">
          <div class="icon">üìÑ</div>
          <div class="label">–°–ª–æ–≤:</div>
          <div class="value">${words}</div>
        </div>
        <div class="result-row">
          <div class="icon">üïë</div>
          <div class="label">–î–æ:</div>
          <div class="value">${minutes} –º–∏–Ω—É—Ç</div>
        </div>
        <div class="result-row">
          <div class="icon">üéØ</div>
          <div class="label">–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂:</div>
          <div class="value">${optimal_time}</div>
        </div>
      `;
    }

    if (service === 'voice_video' || service === 'translate_voice') {
      resultText += `
        <div class="result-row">
          <div class="icon">üïë</div>
          <div class="label">–î–æ:</div>
          <div class="value">${value} –º–∏–Ω—É—Ç</div>
        </div>
      `;
    }

    if (service === 'translate_text') {
      resultText += `
        <div class="result-row">
          <div class="icon">üìù</div>
          <div class="label">–ó–Ω–∞–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:</div>
          <div class="value">${value}</div>
        </div>
      `;
    }

    const deadline = urgent ? data.deadline_urgent : data.deadline;
    const match = deadline.match(/^(.+?) \(–¥–æ (.+?) –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\)$/);

    let daysOnly = '';
    if (match?.[1]) {
      const num = parseInt(match[1]);
      if (!isNaN(num)) {
        daysOnly = num === 1 ? '1 –¥–µ–Ω—å' : `–¥–æ ${num} –¥–Ω–µ–π`;
      } else {
        daysOnly = `–¥–æ ${match[1]}`;
      }
    }

    const dateOnly = match?.[2] || "";

    resultText += `
      <div class="result-row">
        <div class="icon">‚è∞</div>
        <div class="label">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</div>
        <div class="value">${daysOnly}</div>
      </div>
      <div class="result-row">
        <div class="icon">üìÖ</div>
        <div class="label">–î–µ–¥–ª–∞–π–Ω:</div>
        <div class="value">${dateOnly}</div>
      </div>
      <div class="result-row">
        <div class="icon">üí∞</div>
        <div class="label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</div>
        <div class="value">${
          urgent
            ? `${data.price_rub.toLocaleString('ru-RU')} ‚ÇΩ ‚û°Ô∏è ${data.price_rub_urgent.toLocaleString('ru-RU')} ‚ÇΩ`
            : `${data.price_rub.toLocaleString('ru-RU')} ‚ÇΩ`
        }</div>
      </div>
    `;

    setTimeout(() => {
      if (resultContent) {
        resultContent.innerHTML = resultText;
      }
    }, 600 + Math.random() * 400);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', error);
    
    let errorMsg = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ';
    if (error.name === 'AbortError' || error.message.includes('CONNECTION')) {
      errorMsg = 'üîÑ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥';
    }
    
    if (resultContent) {
      resultContent.innerHTML = `
        <p style="color: #ff4444; text-align: center;">
          ‚ùå ${errorMsg}<br>
          <button onclick="calcCalculate()" style="margin-top: 12px; padding: 8px 16px; background: var(--calc-button-bg); border: none; color: white; border-radius: var(--calc-radius); cursor: pointer;">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </p>
      `;
    }
  } finally {
    isProcessing = false;
  }
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π —á–µ—Ä–µ–∑ window
window.calculate = window.calcCalculate;

// ============================================
// –ü–†–û–ì–†–ï–í –°–ï–†–í–ï–†–ê
// ============================================
(async function warmupServer() {
  try {
    console.log('üî• –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    await fetch('https://telegram-voicebot.onrender.com/calculate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ service: 'voice_text', text: '100', is_urgent: false })
    }).catch(() => {});
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≥—Ä–µ—Ç');
  } catch (error) {
    console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å–ø–∏—Ç');
  }
})();
